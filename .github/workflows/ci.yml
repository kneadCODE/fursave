name: "CI"
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  init:
    name: Init
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Print run info
        uses: ./.github/actions/print-run-info
      - name: Print inputs context
        run: echo "${{ toJSON(inputs) }}"

  ####### Run linters, tests & build: START ######
  test-and-build:
    name: Test & Build (${{ matrix.project }})
    needs: [ init ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - project: golib
            type: library
            language: go
          - project: ledgersvc
            type: application
            language: go
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Disabling shallow clone for SonarQube
      - name: Run setup
        run: make ${{ matrix.project }}-setup
      - name: Run tests
        run: make ${{ matrix.project }}-test
      - name: Run golangci-lint
        if: ${{ matrix.language == 'go' }}
        uses: golangci/golangci-lint-action@2e788936b09dd82dc280e845628a40d2ba6b204c #v6.3.1
        with:
          version: v1.63
          working-directory: src/${{ matrix.project }}/
      - name: SonarQube scan
        uses: ./.github/actions/sonarqube-scan
        with:
          token: ${{ secrets[format('SONAR_TOKEN_{0}', matrix.project)] }}
          project-dir: src/${{ matrix.project }}/
      - name: Codacy coverage report
        uses: ./.github/actions/codacy-coverage
        with:
          token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          project: ${{ matrix.project }}
          language: ${{ matrix.language }}
      - name: Docker Build/Push
        if: ${{ matrix.type == 'application' }}
        uses: ./.github/actions/docker-build-push
        with:
          project: ${{ matrix.project }}
          registry: ghcr.io
          registry-username: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}
          image-prefix: ${{ github.repository }}
          push: ${{ github.event_name != 'pull_request' }}
  ####### Run linters, tests & build: END ######

  ####### SAST Start ######
  sonar-scan-root:
    name: SonarQube scan root
    needs: [init]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Disabling shallow clone for SonarQube
      - name: SonarQube Scan
        uses: ./.github/actions/sonarqube-scan
        with:
          token: ${{ secrets.SONAR_TOKEN_BASE }}
  codeql-scan-actions:
    name: CodeQL scan GitHub Actions
    needs: [init]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: actions
          build-mode: none
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:actions"

  codacy-coverage-report-final:
    name: Codacy coverage report final
    needs: [ test-and-build ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Submit final report
        uses: ./.github/actions/codacy-coverage
        with:
          token: ${{ secrets.CODACY_PROJECT_TOKEN }}
  ####### SAST End ######

  post-ci:
    name: Post CI
    needs: [ sonar-scan-root, codeql-scan-actions, codacy-coverage-report-final ]
    runs-on: ubuntu-latest
    steps:
      - name: Post CI
        run: echo "For now I am here just for the GitHub check to indicate whole CI flow is over"


  ####### CD Stage ######
  trigger-cd:
    name: CD
    needs: [ post-ci ]
    if: ${{ github.event_name != 'pull_request' }}
    uses: ./.github/workflows/cd.yml
    with:
      environment: staging
