name: "CI"
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  ci-golib:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: make golib-setup
      - name: run-tests
        run: make golib-test
      - name: sonarqube-setup-go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
      - name: sonarqube-scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_GOLIB }}
          GOPATH: /src/golib
        with:
          projectBaseDir: src/golib/
          args:
            -Dsonar.projectKey=fursave_golib
            -Dsonar.organization=kneadcode
            -Dsonar.cpd.exclusions=**/*_test.go
            -Dsonar.go.coverage.reportPaths=coverage.out
            -Dsonar.exclusions=**/*_test.go
            -Dsonar.tests=.
            -Dsonar.test.inclusions=**/*_test.go
            -Dsonar.sources=.
      - name: codacy-coverage
        shell: bash
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report --force-coverage-parser go --partial -r src/golib/coverage.out
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
  ci-ledgersvc:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: make ledgersvc-setup
      - name: run-tests
        run: make ledgersvc-test
      - name: sonarqube-setup-go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
      - name: sonarqube-scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_LEDGERSVC }}
          GOPATH: /src/ledgersvc
        with:
          projectBaseDir: src/ledgersvc/
          args:
            -Dsonar.projectKey=fursave_ledgersvc
            -Dsonar.organization=kneadcode
            -Dsonar.cpd.exclusions=**/*_test.go
            -Dsonar.go.coverage.reportPaths=coverage.out
            -Dsonar.exclusions=**/*_test.go
            -Dsonar.tests=.
            -Dsonar.test.inclusions=**/*_test.go
            -Dsonar.sources=.
      - name: codacy-coverage
        shell: bash
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report --force-coverage-parser go --partial -r src/ledgersvc/coverage.out
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
  codacy-coverage-report-final:
    name: codacy-coverage-report
    runs-on: ubuntu-latest
    needs: [ci-golib, ci-ledgersvc]
    steps:
      - name: report
        shell: bash
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) final
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
